// Generated by gencpp from file dobot/Joint.msg
// DO NOT EDIT!


#ifndef DOBOT_MESSAGE_JOINT_H
#define DOBOT_MESSAGE_JOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot
{
template <class ContainerAllocator>
struct Joint_
{
  typedef Joint_<ContainerAllocator> Type;

  Joint_()
    : J1(0.0)
    , J2(0.0)
    , J3(0.0)
    , J4(0.0)  {
    }
  Joint_(const ContainerAllocator& _alloc)
    : J1(0.0)
    , J2(0.0)
    , J3(0.0)
    , J4(0.0)  {
  (void)_alloc;
    }



   typedef float _J1_type;
  _J1_type J1;

   typedef float _J2_type;
  _J2_type J2;

   typedef float _J3_type;
  _J3_type J3;

   typedef float _J4_type;
  _J4_type J4;





  typedef boost::shared_ptr< ::dobot::Joint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot::Joint_<ContainerAllocator> const> ConstPtr;

}; // struct Joint_

typedef ::dobot::Joint_<std::allocator<void> > Joint;

typedef boost::shared_ptr< ::dobot::Joint > JointPtr;
typedef boost::shared_ptr< ::dobot::Joint const> JointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot::Joint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot::Joint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot::Joint_<ContainerAllocator1> & lhs, const ::dobot::Joint_<ContainerAllocator2> & rhs)
{
  return lhs.J1 == rhs.J1 &&
    lhs.J2 == rhs.J2 &&
    lhs.J3 == rhs.J3 &&
    lhs.J4 == rhs.J4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot::Joint_<ContainerAllocator1> & lhs, const ::dobot::Joint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dobot::Joint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot::Joint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::Joint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot::Joint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::Joint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot::Joint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot::Joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7711e0b495c20fbc4282f337768fa3e4";
  }

  static const char* value(const ::dobot::Joint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7711e0b495c20fbcULL;
  static const uint64_t static_value2 = 0x4282f337768fa3e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot::Joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot/Joint";
  }

  static const char* value(const ::dobot::Joint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot::Joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 J1\n"
"float32 J2\n"
"float32 J3\n"
"float32 J4\n"
;
  }

  static const char* value(const ::dobot::Joint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot::Joint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.J1);
      stream.next(m.J2);
      stream.next(m.J3);
      stream.next(m.J4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot::Joint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot::Joint_<ContainerAllocator>& v)
  {
    s << indent << "J1: ";
    Printer<float>::stream(s, indent + "  ", v.J1);
    s << indent << "J2: ";
    Printer<float>::stream(s, indent + "  ", v.J2);
    s << indent << "J3: ";
    Printer<float>::stream(s, indent + "  ", v.J3);
    s << indent << "J4: ";
    Printer<float>::stream(s, indent + "  ", v.J4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_MESSAGE_JOINT_H
